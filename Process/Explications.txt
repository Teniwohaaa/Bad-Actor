
 Creates a new process and its primary thread. The new process runs the specified executable file.
 
 * @param lpApplicationName
       The name of the module to be executed. This can be NULL, in which case the module name must be
       the first whitespace-delimited token in the command line string pointed to by lpCommandLine.
 
 * @param lpCommandLine
       The command line to be executed. The maximum length of this string is 32,768 characters,
       including the Unicode terminating null character.
 
 * @param lpProcessAttributes
       A pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle to the
       new process object can be inherited by child processes. If NULL, the handle cannot be inherited.
 
 * @param lpThreadAttributes
       A pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle to the
       new thread object can be inherited by child processes. If NULL, the handle cannot be inherited.
 
 * @param bInheritHandles
       If this parameter is TRUE, each inheritable handle in the calling process is inherited by the
       new process. If the parameter is FALSE, the handles are not inherited.
 
 * @param dwCreationFlags
       The flags that control the priority class and the creation of the process.
 
 * @param lpEnvironment
       A pointer to the environment block for the new process. If this parameter is NULL, the new
       process uses the environment of the calling process.
 
 * @param lpCurrentDirectory
       The full path to the current directory for the process. If this parameter is NULL, the new
       process will have the same current drive and directory as the calling process.
 
 * @param lpStartupInfo
     a pointer to STARTUPINFOW structure that Provides information about how the new process should be started.
 
 * @param lpProcessInformation
       A pointer to a PROCESS_INFORMATION structure that receives identification information about the
       new process.
