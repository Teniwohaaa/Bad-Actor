pe32.dwSize = sizeof(PROCESSENTRY32);

How is the sizeof calculated ?
sizeof is a compile time operator 
it returs the total number of bytes occupied by the type PROCESSENTRY32

this structure is defined as:
typedef struct tagPROCESSENTRY32 {
    DWORD dwSize;
    DWORD cntUsage;
    DWORD th32ProcessID;
    ULONG_PTR th32DefaultHeapID;
    DWORD th32ModuleID;
    DWORD cntThreads;
    DWORD th32ParentProcessID;
    LONG pcPriClassBase;
    DWORD dwFlags;
    TCHAR szExeFile[MAX_PATH];
} PROCESSENTRY32;

so sizeof(PROCESSENTRY32) will compute the total size of all those fields 


HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

This calls a Windows API function to create a snapshot of all currently running processes in the system.

TH32CS_SNAPPROCESS: tells Windows you want to take a snapshot of the process list.
0: means "give me all processes" 
(the second parameter can specify a specific PID if you're taking snapshots of threads or modules, but for processes, it's always 0).

CreateToolhelp32Snapshot() returns a HANDLE â€” basically a reference to a kernel object.

That handle lets you iterate through the list of processes using:

Process32First(snapshot, &pe32);

Process32Next(snapshot, &pe32);

These functions fill in the pe32 structure with info about each process: PID, exe name, parent PID, etc.

HANDLE OpenProcess(
  [in] DWORD dwDesiredAccess,   // Specifies the access rights requested for the process (e.g., read, write, terminate).
  [in] BOOL  bInheritHandle,    // If TRUE, the returned handle can be inherited by child processes; if FALSE, it cannot.
  [in] DWORD dwProcessId        // The unique identifier (ID) of the process to open.
);
If the function succeeds, the return value is an open handle to the specified process.
If the function fails, the return value is NULL.

LPVOID VirtualAllocEx(
  [in]           HANDLE hProcess, Expects a handle to the process where memory will be allocated.
  [in, optional] LPVOID lpAddress, Expects a pointer to the starting address for the allocation. If NULL, the system determines the address.
  [in]           SIZE_T dwSize, Expects the size of the memory block to be allocated, in bytes.
  [in]           DWORD  flAllocationType, Expects the type of memory allocation (e.g., MEM_COMMIT, MEM_RESERVE).
  [in]           DWORD  flProtect Expects the memory protection for the allocated region (e.g., PAGE_READWRITE).
);

If the function succeeds, the return value is a pointer to the allocated memory in the specified process.
If the function fails, the return value is NULL.
