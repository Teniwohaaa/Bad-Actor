Here we are gonna adress the dynamic-link library (DLL) injection code.

first, we need to prepare the dll
the diffrence between a dll and an exe is that a dll has a DllMain function.
in exe it's called main. it's being called by the os

in our case we will make first a simple message box first
here are the steps:
1. we create the dll 
2. we compile it
3. we inject it into a process
4. we run the process and see the message box

DLLMAIN
------------
BOOL WINAPI DllMain(
  _In_ HINSTANCE hinstDLL, // Handle to the dll module  
  _In_ DWORD     fdwReason, //reason for the calling function,  indicates why the DLL entry-point function is being called
  _In_ LPVOID    lpvReserved // dynamic or static loads depending on the value of fdwReason
) 
{
    switch (fdwReason)
    {
        case DLL_PROCESS_ATTACH: // called when the dll is loaded into a process
            MessageBox(NULL, "DLL Injected Successfully!", "Success", MB_OK);
            break;
        case DLL_THREAD_ATTACH: // called when a thread is created in the process
            break;
        case DLL_THREAD_DETACH: // called when a thread exits cleanly
            break;
        case DLL_PROCESS_DETACH: // called when the dll is unloaded from a process
            break;
    }
    return TRUE; // return TRUE to indicate successful initialization
}

SIMPLE DLL INJECTION IN A PROCESS
-----------------------------
here we will load the dll into a process using the CreateThread function.
first we make sure to include the dll
PCSTR dllPath = "C:\\path\\to\\your\\dll.dll"; // specify the path to your DLL

we used the PCSTR type to define a pointer to a constant string, which is suitable for file paths.

HINSTANCE hDll = LoadLibraryA(dllPath); // load the DLL into the process

HINSTANCE is a handle to an instance, which is here a reference to the loaded DLL in memory.

loadlibraryA Loads the specified module into the address space of the calling process.

HMODULE LoadLibraryA(
  [in] LPCSTR lpLibFileName // This can be either a library module (a .dll file) or an executable module (an .exe file). 
);
